A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

 

Example 1:

Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.


#########SOLUTION###############################################

class Solution(object):
    def partitionLabels(self, S):
        D, A, p, e = {c:i for i,c in enumerate(S)}, [], -1, 0
        for i,c in enumerate(S):
            e = max(e,D[c])
            if e == i: p, _ = i, A.append(i-p)
        return A
