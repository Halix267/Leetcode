Compare two version numbers version1 and version2.
If version1 > version2 return 1; if version1 < version2 return -1;otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.

The . character does not represent a decimal point and is used to separate number sequences.

For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

You may assume the default revision number for each level of a version number to be 0. For example, version number 3.4 has a revision number of 3 and 4 
for its first and second level revision number. Its third and fourth level revision number are both 0.

################SOLUTION (better than 94%)########################

class Solution:
    def compareVersion(self, version1: str, version2: str) -> int:
        l1, l2 = version1.split('.'), version2.split('.')
        
        for i in range(max(len(l1),len(l2))):
            val1 = int(l1[i]) if i < len(l1) else 0
            val2 = int(l2[i]) if i < len(l2) else 0
            if val1 != val2:
                return 1 if val1 > val2 else -1
        return 0
